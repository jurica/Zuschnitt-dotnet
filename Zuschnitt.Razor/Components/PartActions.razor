@inject AppState AppState;

@if (Part != null)
{
    <FluentIcon Id="@_id" Value="@(new Icons.Regular.Size24.MoreVertical())" @onclick="() => _showMenu = !_showMenu"/>
    <FluentMenu @bind-Open="_showMenu" Anchor="@_id" UseMenuService="true" VerticalThreshold="170">
        <ActionMenuCheckbox Text="Part done" @bind-Checked="Part.Done"/>
        <ActionMenuItem OnClick="CopyPart" Text="Duplicate part" Icon="@(new Icons.Regular.Size20.Copy())"/>
        <FluentDivider/>
        @foreach (var column in Part.Parent.Parent.Columns)
        {
            if (column == Part.Parent) continue;
            <ActionMenuItem OnClick="() => Reassign(column)" Text="@($"Move to: #{column.Pos() + 1}")" Icon="@(new Icons.Regular.Size20.TableMoveRight())"/>
        }
        <FluentDivider/>
        <ActionMenuItem OnClick="DeletePart" Text="Delete part" Icon="@(new Icons.Regular.Size20.Delete())"/>
    </FluentMenu>
}

@code {
    [Parameter] public Part? Part { get; set; }

    private bool _showMenu = false;
    private string _id = Guid.NewGuid().ToString();

    private void CopyPart()
    {
        _showMenu = false;
        if (Part == null) return;
        Part.CopyTo(Part.Parent);
        AppState.StateHasChanged();
    }

    private void DeletePart()
    {
        _showMenu = false;
        if (Part == null) return;
        
        Part.Delete();
        
        AppState.StateHasChanged();
    }

    private void Reassign(Column column)
    {
        _showMenu = false;
        if (Part == null) return;
        
        Part.Reassign(column);
        
        AppState.StateHasChanged();
    }

}