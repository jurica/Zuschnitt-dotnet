@inject AppState AppState;
@inject IJSRuntime JsRuntime;

@if (AppState.Project != null)
{
    <div style="display: flex; width: 100vw;">
        <div style="height: calc(-86px + 100vh); overflow: scroll; width: 380px; padding: 10px;">
            @foreach (var sheet in AppState.Project.Sheets)
            {
                <SheetForm Sheet="sheet"/>
                @foreach (var column in sheet.Columns)
                {
                    <ColumnHeader Column="column"/>
                    @foreach (var part in column.Parts)
                    {
                        <PartForm @ref="_partFormRef" Part="part"/>
                    }
                }

                @if (sheet != AppState.Project.Sheets.Last())
                {
                    <hr style="margin: 10px;"/>
                }
            }
        </div>
        <div
            style="height: calc(-86px + 100vh); overflow: scroll; width: calc(-360px + 100vw); padding: 10px; padding-left: 0px;">
            @foreach (var sheet in AppState.Project.Sheets)
            {
                <SheetSVG Sheet="sheet" PartClicked="PartClicked"/>
            }
        </div>
    </div>
}

@code



{
    Dictionary<Part, PartForm> _partFormRefs = new Dictionary<Part, PartForm>();

    PartForm _partFormRef
    {
        set { _partFormRefs.TryAdd(value.Part, value); }
    }

    protected override void OnInitialized()
    {
        AppState.OnStateChange += StateHasChanged;
    }

    private async Task PartClicked(Part part)
    {
        _partFormRefs[part].Focus();
        JsRuntime.InvokeAsync<object>("scrollIntoView", $"PartForm_{part.Id}");
    }
}
