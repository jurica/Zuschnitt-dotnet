@using Zuschnitt.Models;

@inject AppState AppState;

<FluentButton Id="@_id" IconStart="@(new Icons.Regular.Size20.LineHorizontal3())" OnClick="() => _showMenu = !_showMenu"/>
<FluentMenu @bind-Open="_showMenu" Anchor="@_id">
    <ActionMenuItem OnClick="AddColumn" Icon="@(new Icons.Regular.Size20.AddCircle())" Text="Add Column"/>
    <FluentDivider/>
    <ActionMenuItem OnClick="AddSheet" Icon="@(new Icons.Regular.Size20.New())" Text="New sheet"/>
    <ActionMenuItem OnClick="CopySheet" Icon="@(new Icons.Regular.Size20.Copy())" Text="Duplicate Sheet"/>
    <FluentDivider/>
        @foreach (var sheet in AppState.Project.Sheets)
        {
            if (sheet == AppState.SelectedSheet) continue;
            <ActionMenuItem OnClick="() => SelectSheet(sheet)" Icon="@(new Icons.Regular.Size20.LayoutColumnTwoSplitRight())" Text="@($"Select: {sheet.Name}")"/>
        }
    <FluentDivider/>
    <ActionMenuItem OnClick="DeleteCurrentSheet" Icon="@(new Icons.Regular.Size20.Delete())" Text="Delete sheet"/>
</FluentMenu>

@code {
    private bool _showMenu = false;
    private string _id = Guid.NewGuid().ToString();

    private void DeleteCurrentSheet()
    {
        _showMenu = false;
        AppState.Project.RemoveSheet(AppState.SelectedSheet);
        if (!AppState.Project.Sheets.Any())
        {
            AppState.Project.AddSheet();
        }
        AppState.SelectedSheet = AppState.Project.Sheets.First();

        AppState.StateHasChanged();
    }

    private void AddSheet()
    {
        _showMenu = false;
        AppState.Project.AddSheet();
        AppState.SelectedSheet = AppState.Project.Sheets.Last();
        AppState.StateHasChanged();
    }

    private void CopySheet()
    {
        _showMenu = false;
        var copy = new Sheet(AppState.SelectedSheet);
        AppState.Project.AddSheet(copy);
        AppState.SelectedSheet = copy;
        AppState.StateHasChanged();
    }

    private void SelectSheet(Sheet sheet)
    {
        _showMenu = false;
        AppState.SelectedSheet = sheet;
        AppState.StateHasChanged();
    }

    private void AddColumn()
    {
        _showMenu = false;
        AppState.SelectedSheet.AddColumn();
        AppState.StateHasChanged();
    }

}