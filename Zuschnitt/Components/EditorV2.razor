@using Zuschnitt.Models;

<FluentLayout Style="margin-top: 10px;">
    <FluentSlider Orientation=Orientation.Horizontal Min="0" Max="1" Step="0.01" @bind-Value=Project.ScaleFactor></FluentSlider>
    <FluentHeader>
        @Project.Name
        <FluentSpacer/>
        <FluentButton IconStart="@(new Icons.Regular.Size28.Edit())" @onclick="() => Project.Editing = true"></FluentButton>
    </FluentHeader>
    <FluentTabs>
        @{
            foreach (var sheet in Project.Sheets)
            {
                <FluentTab Label="@sheet.Name" Id="@sheet.Name">
                    <FluentButton IconStart="@(new Icons.Regular.Size28.Add())" @onclick="() => AddColumn(sheet)">Add Column</FluentButton>
                    <FluentHorizontalScroll Style="--scroll-align: flex-start">
                        @{
                            foreach (var column in sheet.Columns)
                            {
                                <FluentCard @onmouseenter="() => column.Highlighted = true" @onmouseleave="() => column.Highlighted = false" MinimalStyle="true" Style="padding: 10px; width: 300px">
                                    <FluentStack Orientation="Orientation.Vertical">
                                        <FluentLabel Typo="Typography.H3">#@(sheet.Columns.IndexOf(@column)+1) (@column.Width()/@column.Height())</FluentLabel>
                                        <FluentStack Orientation="Orientation.Horizontal">
                                            <FluentButton IconStart="@(new Icons.Regular.Size28.Add())" @onclick="() => AddPart(column)" Style="horiz-align: center">Add Part</FluentButton>
                                            <FluentSpacer></FluentSpacer>
                                            <FluentButton IconStart="@(new Icons.Regular.Size28.Delete())" @onclick="() => DeleteColumn(sheet, column)"></FluentButton>
                                        </FluentStack>
                                        @{
                                            foreach (var part in column.Parts)
                                            {
                                                <div @onmouseenter="() => part.Highlighted = true" @onmouseleave="() => part.Highlighted = false">
                                                    <FluentTextField @bind-Value=part.Name Style="width: 100%"></FluentTextField>
                                                    <FluentStack Orientation="Orientation.Horizontal">
                                                        <FluentNumberField @bind-Value=part.Width Style="width: 50%;"></FluentNumberField>
                                                        <FluentNumberField @bind-Value=part.Height Style="width: 50%;"></FluentNumberField>
                                                        <FluentButton IconStart="@(new Icons.Regular.Size28.Delete())" @onclick="() => DeletePart(column, part)"></FluentButton>
                                                    </FluentStack>
                                                </div>
                                            }
                                        }
                                    </FluentStack>
                                </FluentCard>
                            }
                        }
                    </FluentHorizontalScroll>
                    <div style="transform-origin: top left; transform: scale(@Project.ScaleFactor);">
                        <div style="transform-origin: center; transform: rotate(0deg);">
                            <svg width="@(Margin + sheet.Width)" height="@(Margin + sheet.Height)">
                                <rect id="@sheet.Id.ToString()" x="@(Margin / 2)" y="@(Margin / 2)" width="@sheet.Width" height="@sheet.Height" stroke="@sheet.Color" stroke-width="1" fill="@sheet.FillColor" @onclick="() => Clicked(sheet.Id)"/>
                                @{
                                    int x = Margin / 2;
                                    foreach (var column in sheet.Columns)
                                    {
                                        <rect id="@column.Id.ToString()" x="@x" y="@(Margin / 2)" width="@column.Width()" height="@sheet.Height" stroke="@column.Color" stroke-width="1" fill="@column.FillColor" fill-opacity="@column.FillOpacity()" @onmouseleave="() => column.Highlighted = false" @onmouseenter="() => column.Highlighted = true" @onclick="() => column.Editing = true"/>
                                        int y = Margin / 2;
                                        foreach (var part in column.Parts)
                                        {
                                            <rect id="@part.Id.ToString()" x="@x" y="@y" width="@part.Width" height="@part.Height" stroke="@part.Color" stroke-width="1" fill="@part.FillColor" fill-opacity="@part.FillOpacity()" @onmouseleave="() => part.Highlighted = false" @onmouseenter="() => part.Highlighted = true" @onclick="() => part.Editing = true" @oncontextmenu="() => part.Editing = true" @oncontextmenu:preventDefault="true"/>
                                            y += part.Height;
                                        }

                                        x += column.Width();
                                    }
                                }
                            </svg>
                        </div>
                    </div>
                </FluentTab>
            }
        }
    </FluentTabs>
    @foreach (var sheet in Project.Sheets)
    {
        @foreach (var column in sheet.Columns)
        {
            <FluentPopover Style="width: 300px;" @bind-Open="column.Editing" AnchorId="@column.Id.ToString()">
                <Header>Move to Sheet</Header>
                <Body>
                <FluentCombobox TOption="Sheet" Items="Project.Sheets" OptionText="@(s => s.Name)" OptionSelected="@(s => s.Columns.Contains(column))" SelectedOptionChanged="@(s => Reassign(column, sheet, s))"></FluentCombobox>
                </Body>
            </FluentPopover>
            @foreach (var part in column.Parts)
            {
                <FluentPopover Style="width: 300px;" @bind-Open="part.Editing" AnchorId="@part.Id.ToString()">
                    <Header>Move to Column</Header>
                    <Body>
                    <FluentCombobox TOption="Column" Label="Column" Items="sheet.Columns" OptionText="@(c => $"#{sheet.Columns.IndexOf(c) + 1}")" OptionSelected="@(c => c.Parts.Contains(part))" SelectedOptionChanged="@(c => Reassign(part, column, c))"></FluentCombobox>
                    </Body>
                </FluentPopover>
            }
        }
    }
</FluentLayout>

@code {
    [Parameter] public Project Project { get; set; }
    private int Margin = 10;

    private void AddSheet()
    {
        Project.Sheets.Add(new Sheet());
    }

    private void DeleteSheet(Sheet sheet)
    {
        Project.Sheets.Remove(sheet);
    }

    private void AddColumn(Sheet sheet)
    {
        sheet.Columns.Add(new Column());
    }

    private void DeleteColumn(Sheet sheet, Column column)
    {
        sheet.Columns.Remove(column);
    }

    private void AddPart(Column column)
    {
        column.Parts.Add(new Part());
        StateHasChanged();
    }

    private void DeletePart(Column column, Part part)
    {
        column.Parts.Remove(part);
    }

    private void Clicked(Guid id)
    {
    }

    private void Reassign(Part part, Column currentColumn, Column newColumn)
    {
        if (newColumn.Parts.Contains(part)) return;
        currentColumn.Parts.Remove(part);
        newColumn.Parts.Add(part);
    }

    private void Reassign(Column column, Sheet currentSheet, Sheet newSheet)
    {
        if (newSheet.Columns.Contains(column)) return;
        currentSheet.Columns.Remove(column);
        newSheet.Columns.Add(column);
    }

}