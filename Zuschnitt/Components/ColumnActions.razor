@using Zuschnitt.Models;

@inject AppState AppState;

<FluentAnchor Id="@_id" IconStart="@(new Icons.Regular.Size20.LineHorizontal3())" OnClick="() => _showMenu = !_showMenu"/>
<FluentMenu @bind-Open="_showMenu" Anchor="@_id">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
        <FluentButton IconStart="@(new Icons.Regular.Size20.AddCircle())" OnClick="AddPart" Appearance="Appearance.Stealth" Style="width: 100%;">Add Part</FluentButton>
        @foreach (var sheet in AppState.Project.Sheets)
        {
            <FluentButton Disabled="@(sheet == AppState.CurrentSheet)" Style="width: 100%" IconStart="@(new Icons.Regular.Size20.TableMoveRight())" @onclick="() => Reassign(sheet)" Appearance="Appearance.Stealth">Move to: @sheet.Name</FluentButton>
        }
        <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Style="width: 100%" Appearance="Appearance.Stealth" @onclick="() => DeleteColumn()">Delete</FluentButton>
    </FluentStack>
</FluentMenu>

@code {
    [Parameter] public Column? Column { get; set; }

    private bool _showMenu = false;
    private string _id = $"{Guid.NewGuid().ToString()}";

    private void AddPart()
    {
        _showMenu = false;
        if (Column == null) return;
        Column.Parts.Add(new Part());
        AppState.StateHasChanged();
    }

    private void Reassign(Sheet newSheet)
    {
        _showMenu = false;
        if (Column == null) return;
        if (newSheet.Columns.Contains(Column)) return;

        AppState.CurrentSheet.Columns.Remove(Column);
        newSheet.Columns.Add(Column);
        AppState.StateHasChanged();
    }

    private void DeleteColumn()
    {
        _showMenu = false;
        if (Column == null) return;

        AppState.CurrentSheet.Columns.Remove(Column);
        AppState.StateHasChanged();
    }

}