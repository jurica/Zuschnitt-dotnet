@using Zuschnitt.Models;

@inject AppState AppState;

<FluentButton Id="@_id" IconStart="@(new Icons.Regular.Size20.LineHorizontal3())" OnClick="() => _showMenu = !_showMenu"/>
<FluentMenu @bind-Open="_showMenu" Anchor="@_id">
    <ActionMenuItem OnClick="AddPart" Text="Add Part" Icon="@(new Icons.Regular.Size20.AddCircle())" />
    <ActionMenuItem OnClick="CopyColumn" Text="Duplicate Column" Icon="@(new Icons.Regular.Size20.Copy())"/>
    @foreach (var sheet in AppState.Project.Sheets)
    {
        if (sheet == AppState.CurrentSheet) continue;
        <ActionMenuItem Icon="@(new Icons.Regular.Size20.TableMoveRight())" OnClick="() => Reassign(sheet)" Text="@($"Move to: {sheet.Name}")"/>
    }
    <ActionMenuItem Icon="@(new Icons.Regular.Size20.Delete())" OnClick="DeleteColumn" Text="Delete Column"/>
</FluentMenu>

@code {
    [Parameter] public Column? Column { get; set; }

    private bool _showMenu = false;
    private string _id = $"{Guid.NewGuid().ToString()}";

    private void CopyColumn()
    {
        _showMenu = false;
        if (Column == null) return;
        var copy = new Column(Column);
        AppState.CurrentSheet.Columns.Add(copy);
        AppState.StateHasChanged();
    }

    private void AddPart()
    {
        _showMenu = false;
        if (Column == null) return;
        Column.Parts.Add(new Part());
        AppState.StateHasChanged();
    }

    private void Reassign(Sheet newSheet)
    {
        _showMenu = false;
        if (Column == null) return;
        if (newSheet.Columns.Contains(Column)) return;

        AppState.CurrentSheet.Columns.Remove(Column);
        newSheet.Columns.Add(Column);
        AppState.StateHasChanged();
    }

    private void DeleteColumn()
    {
        _showMenu = false;
        if (Column == null) return;

        AppState.CurrentSheet.Columns.Remove(Column);
        AppState.StateHasChanged();
    }

}