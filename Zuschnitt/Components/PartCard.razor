@using Zuschnitt.Models

@inject AppState AppState

@if (Part != null && Column != null)
{
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
        @if (AppState.ReducedEditor)
        {
            <FluentLabel Typo="Typography.H5">@Part.Name</FluentLabel>
        }
        else
        {
        <PartActions Column="Column" Part="Part"/>
        <FluentTextField Appearance="_appearance" @bind-Value=Part.Name Style="width: 100%"></FluentTextField>
        }
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentNumberField Appearance="_appearance" @bind-Value=Part.Width @bind-Value:after="AppState.StateHasChanged" Style="width: 50%; direction: rtl"></FluentNumberField>
            x
            <FluentNumberField Appearance="_appearance" @bind-Value=Part.Height @bind-Value:after="AppState.StateHasChanged" Style="width: 50%; direction: rtl"></FluentNumberField>
        </FluentStack>
    </FluentStack>
}

@code {
    [Parameter] public Part? Part { get; set; }
    [Parameter] public Column? Column { get; set; }

    private FluentInputAppearance _appearance
    {
        get
        {
            if (AppState.ReducedEditor) return FluentInputAppearance.Filled;
            return FluentInputAppearance.Outline;
        }
    }

    private void DeletePart(Column column, Part part)
    {
        column.Parts.Remove(part);
        AppState.StateHasChanged();
    }

    private void HighlightOn()
    {
        if (Part == null) return;
        Part.Highlighted = true;
        AppState.StateHasChanged();
    }

    private void HighlightOff()
    {
        if (Part == null) return;
        Part.Highlighted = false;
        AppState.StateHasChanged();
    }
}